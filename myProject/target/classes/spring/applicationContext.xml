<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd 
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">
	<!--设置包扫描,扫描com.jt下的全部子孙包  -->
	<context:component-scan base-package="com.lw"/>
	
	<!--引入配置文件 
	如果出现多个配置文件,解决方法:
	1.通配符location="properties/*.properties
	2.使用bean的方式通过list标签方式进行管理
	 -->
	 <!-- 方法一 -->
	<!-- 	<util:properties location="properties/jdbc.properties"></util:properties>-->	
	<!--方法二  -->
	<!-- 		<context:property-placeholder location="classpath:properties/jdbc.properties"/> -->	
	<!--方法三  -->
	<bean id="propertyPlaceholder" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
		<list>
		<value>classpath:properties/jdbc.properties</value>
		</list>
		</property>
		</bean>
<!-- 导入数据源 -->
		<!-- 配置连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
		<!-- 数据库驱动 -->
		<property name="driverClassName" value="${jdbc.driver}" />
		<!-- 相应驱动的jdbcUrl -->
		<property name="url" value="${jdbc.url}" />
		<!-- 数据库的用户名 -->
		<property name="username" value="${jdbc.username}" />
		<!-- 数据库的密码 -->
		<property name="password" value="${jdbc.password}" />
	
	</bean>
	
</beans>